// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sections.sql

package queries

import (
	"context"

	"time"
)

const cleanPositions = `-- name: CleanPositions :exec
call clean_section_positions()
`

func (q *Queries) CleanPositions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanPositions)
	return err
}

const cleanPositionsBySectionGroup = `-- name: CleanPositionsBySectionGroup :exec
with
    ordered as (
        select id, row_number() over (order by position) as new_position
        from section o
        where o.presentation = (select i.presentation from section i where i.id = $1)
    )
    update section
    set position = ordered.new_position
from ordered
where section.id = ordered.id
`

func (q *Queries) CleanPositionsBySectionGroup(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, cleanPositionsBySectionGroup, id)
	return err
}

const createSection = `-- name: CreateSection :one
INSERT INTO section (
    presentation,
    name,
    duration,
    position
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, presentation, name, duration, position
`

type CreateSectionParams struct {
	Presentation int64         `json:"presentation"`
	Name         string        `json:"name"`
	Duration     time.Duration `json:"duration"`
	Position     int16         `json:"position"`
}

func (q *Queries) CreateSection(ctx context.Context, arg CreateSectionParams) (Section, error) {
	row := q.db.QueryRow(ctx, createSection,
		arg.Presentation,
		arg.Name,
		arg.Duration,
		arg.Position,
	)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.Presentation,
		&i.Name,
		&i.Duration,
		&i.Position,
	)
	return i, err
}

const deleteSection = `-- name: DeleteSection :execrows
delete from section
where id = $1
`

func (q *Queries) DeleteSection(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSection, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSection = `-- name: GetSection :one
select id, presentation, name, duration, position
from section
where id = $1
`

func (q *Queries) GetSection(ctx context.Context, id int64) (Section, error) {
	row := q.db.QueryRow(ctx, getSection, id)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.Presentation,
		&i.Name,
		&i.Duration,
		&i.Position,
	)
	return i, err
}

const getSections = `-- name: GetSections :many
select id, presentation, name, duration, position
from section
where presentation = $1
order by
    case when $2::text = 'ASC' and $3::text = 'name' then name end asc,
    case when $2::text = 'DESC' and $3::text = 'name' then name end desc,
    case
        when $2::text = 'ASC' and $3::text = 'duration' then duration
    end asc,
    case
        when $2::text = 'DESC' and $3::text = 'duration' then duration
    end desc,
    case
        when $2::text = 'ASC' and $3::text = 'position' then position
    end asc,
    case
        when $2::text = 'DESC' and $3::text = 'position' then position
    end desc,
    id desc
limit $5
offset $4
`

type GetSectionsParams struct {
	PresentationID int64  `json:"presentation_id"`
	Direction      string `json:"direction"`
	SortBy         string `json:"sort_by"`
	QueryOffset    int32  `json:"query_offset"`
	QueryLimit     int32  `json:"query_limit"`
}

func (q *Queries) GetSections(ctx context.Context, arg GetSectionsParams) ([]Section, error) {
	rows, err := q.db.Query(ctx, getSections,
		arg.PresentationID,
		arg.Direction,
		arg.SortBy,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Section
	for rows.Next() {
		var i Section
		if err := rows.Scan(
			&i.ID,
			&i.Presentation,
			&i.Name,
			&i.Duration,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectionsMetadata = `-- name: GetSectionsMetadata :one
select count(*)
from section
where presentation = $1
`

func (q *Queries) GetSectionsMetadata(ctx context.Context, presentationID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getSectionsMetadata, presentationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const maxPosition = `-- name: MaxPosition :one
select coalesce(max(position), 0)::smallint
from section
where presentation = $1
`

func (q *Queries) MaxPosition(ctx context.Context, presentationID int64) (int16, error) {
	row := q.db.QueryRow(ctx, maxPosition, presentationID)
	var column_1 int16
	err := row.Scan(&column_1)
	return column_1, err
}

const moveSection = `-- name: MoveSection :exec
update section s
set position = case when s.id <> $1 then position - ($2::int / abs($2)) when id = $1 then position + $2 end
where position between least(position + $2, position) and greatest(position + $2, position) and presentation = (
    select sp.presentation from section sp where sp.id = $1
)
`

type MoveSectionParams struct {
	ID      int64 `json:"id"`
	Column2 int32 `json:"column_2"`
}

func (q *Queries) MoveSection(ctx context.Context, arg MoveSectionParams) error {
	_, err := q.db.Exec(ctx, moveSection, arg.ID, arg.Column2)
	return err
}

const patchSection = `-- name: PatchSection :execrows
UPDATE section
SET
    name = COALESCE($1, name),
    duration = COALESCE($2, duration),
    position = COALESCE($3, position)
WHERE
    id = $4
`

type PatchSectionParams struct {
	Name     *string        `json:"name"`
	Duration *time.Duration `json:"duration"`
	Position *int16         `json:"position"`
	ID       int64          `json:"id"`
}

func (q *Queries) PatchSection(ctx context.Context, arg PatchSectionParams) (int64, error) {
	result, err := q.db.Exec(ctx, patchSection,
		arg.Name,
		arg.Duration,
		arg.Position,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateSection = `-- name: UpdateSection :execrows
UPDATE section
SET
    name = $1,
    duration = $2,
    position = $3
WHERE
    id = $4
`

type UpdateSectionParams struct {
	Name     string        `json:"name"`
	Duration time.Duration `json:"duration"`
	Position int16         `json:"position"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdateSection(ctx context.Context, arg UpdateSectionParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateSection,
		arg.Name,
		arg.Duration,
		arg.Position,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
