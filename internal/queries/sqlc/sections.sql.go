// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sections.sql

package queries

import (
	"context"

	"time"
)

const createSection = `-- name: CreateSection :one
INSERT INTO section (
    presentation,
    name,
    duration,
    position
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, presentation, name, duration, position
`

type CreateSectionParams struct {
	Presentation int64         `json:"presentation"`
	Name         string        `json:"name"`
	Duration     time.Duration `json:"duration"`
	Position     int16         `json:"position"`
}

func (q *Queries) CreateSection(ctx context.Context, arg CreateSectionParams) (Section, error) {
	row := q.db.QueryRow(ctx, createSection,
		arg.Presentation,
		arg.Name,
		arg.Duration,
		arg.Position,
	)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.Presentation,
		&i.Name,
		&i.Duration,
		&i.Position,
	)
	return i, err
}

const deleteSection = `-- name: DeleteSection :execrows
delete from section
where id = $1
`

func (q *Queries) DeleteSection(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSection, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSection = `-- name: GetSection :one
select id, presentation, name, duration, position
from section
where id = $1
`

func (q *Queries) GetSection(ctx context.Context, id int64) (Section, error) {
	row := q.db.QueryRow(ctx, getSection, id)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.Presentation,
		&i.Name,
		&i.Duration,
		&i.Position,
	)
	return i, err
}
