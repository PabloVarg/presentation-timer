// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: presentations.sql

package queries

import (
	"context"
)

const createPresentation = `-- name: CreatePresentation :one
INSERT INTO presentation(
    name
) VALUES (
    $1
)
RETURNING id, name
`

func (q *Queries) CreatePresentation(ctx context.Context, name string) (Presentation, error) {
	row := q.db.QueryRow(ctx, createPresentation, name)
	var i Presentation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePresentation = `-- name: DeletePresentation :execrows
delete from presentation
where id = $1
`

func (q *Queries) DeletePresentation(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deletePresentation, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getPresentation = `-- name: GetPresentation :one
select id, name
from presentation
where id = $1
`

func (q *Queries) GetPresentation(ctx context.Context, id int64) (Presentation, error) {
	row := q.db.QueryRow(ctx, getPresentation, id)
	var i Presentation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPresentations = `-- name: GetPresentations :many
select id, name
from presentation
order by
    case when $1::text = 'ASC' and $2::text <> '' then $2 end asc,
    case when $1::text = 'DESC' and $2::text <> '' then $2 end desc,
    id desc
limit $4
offset $3
`

type GetPresentationsParams struct {
	Direction   string `json:"direction"`
	SortBy      string `json:"sort_by"`
	QueryOffset int32  `json:"query_offset"`
	QueryLimit  int32  `json:"query_limit"`
}

func (q *Queries) GetPresentations(ctx context.Context, arg GetPresentationsParams) ([]Presentation, error) {
	rows, err := q.db.Query(ctx, getPresentations,
		arg.Direction,
		arg.SortBy,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Presentation
	for rows.Next() {
		var i Presentation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresentationsMetadata = `-- name: GetPresentationsMetadata :one
select count(*)
from presentation
`

func (q *Queries) GetPresentationsMetadata(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getPresentationsMetadata)
	var count int64
	err := row.Scan(&count)
	return count, err
}
